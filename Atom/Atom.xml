<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>Atom</name>
  </assembly>
  <members>
    <member name="N:Atom">
    </member>
    <member name="T:Atom.MainForm">
      <summary>
The main form.</summary>
    </member>
    <member name="M:Atom.MainForm.#ctor">
      <summary>
Initializes a new instance of the $LS$topic_0000000000000002$SL$$LE$MainForm$EL$ class.</summary>
    </member>
    <member name="M:Atom.MainForm.AddMsg(System.String)">
      <summary>
Adds the specified message to the output-string.</summary>
      <param name="msg">
The message.</param>
    </member>
    <member name="T:Atom.Program">
      <summary>
The program.</summary>
    </member>
    <member name="N:Atom.Annotations">
    </member>
    <member name="T:Atom.Annotations.CanBeNullAttribute">
      <summary>
Indicates that the value of the marked element could be $C$null$END-C$ sometimes, so the check for $C$null$END-C$ is necessary before its usage</summary>
    </member>
    <member name="T:Atom.Annotations.NotNullAttribute">
      <summary>
Indicates that the value of the marked element could never be $C$null$END-C$</summary>
    </member>
    <member name="T:Atom.Annotations.StringFormatMethodAttribute">
      <summary>
Indicates that the marked method builds string by format pattern and (optional) arguments. Parameter, which contains format string, should be given in constructor. The format string should be in $LS$$SL$$LE$Format(IFormatProvider,string,object[])$EL$-like form</summary>
    </member>
    <member name="M:Atom.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
      <param name="formatParameterName">
Specifies which parameter of an annotated method should be treated as format-string</param>
    </member>
    <member name="P:Atom.Annotations.StringFormatMethodAttribute.FormatParameterName">
    </member>
    <member name="T:Atom.Annotations.InvokerParameterNameAttribute">
      <summary>
Indicates that the function argument should be string literal and match one of the parameters of the caller function. For example, ReSharper annotates the parameter of $MSDNLS$system.argumentnullexception$MSDNLE$ArgumentNullException$MSDNEL$</summary>
    </member>
    <member name="T:Atom.Annotations.NotifyPropertyChangedInvocatorAttribute">
      <summary>
Indicates that the method is contained in a type that implements  $MSDNLS$system.componentmodel.inotifypropertychanged$MSDNLE$INotifyPropertyChanged$MSDNEL$ interface  and this method is used to notify that some property value changed</summary>
      <remarks>
The method should be non-static and conform to one of the supported signatures: <list><item><c>NotifyChanged(string)</c></item><item><c>NotifyChanged(params string[])</c></item><item><c>NotifyChanged{T}(Expression{Func{T}})</c></item><item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item><item><c>SetProperty{T}(ref T, T, string)</c></item></list></remarks>
    </member>
    <member name="M:Atom.Annotations.NotifyPropertyChangedInvocatorAttribute.#ctor">
    </member>
    <member name="M:Atom.Annotations.NotifyPropertyChangedInvocatorAttribute.#ctor(System.String)">
      <param name="parameterName">
</param>
    </member>
    <member name="P:Atom.Annotations.NotifyPropertyChangedInvocatorAttribute.ParameterName">
    </member>
    <member name="T:Atom.Annotations.ContractAnnotationAttribute">
      <summary>
Describes dependency between method input and output</summary>
    </member>
    <member name="M:Atom.Annotations.ContractAnnotationAttribute.#ctor(System.String)">
      <param name="contract">
</param>
    </member>
    <member name="M:Atom.Annotations.ContractAnnotationAttribute.#ctor(System.String,System.Boolean)">
      <param name="contract">
</param>
      <param name="forceFullStates">
</param>
    </member>
    <member name="P:Atom.Annotations.ContractAnnotationAttribute.Contract">
    </member>
    <member name="P:Atom.Annotations.ContractAnnotationAttribute.ForceFullStates">
    </member>
    <member name="T:Atom.Annotations.LocalizationRequiredAttribute">
      <summary>
Indicates that marked element should be localized or not</summary>
    </member>
    <member name="M:Atom.Annotations.LocalizationRequiredAttribute.#ctor">
    </member>
    <member name="M:Atom.Annotations.LocalizationRequiredAttribute.#ctor(System.Boolean)">
      <param name="required">
</param>
    </member>
    <member name="P:Atom.Annotations.LocalizationRequiredAttribute.Required">
    </member>
    <member name="T:Atom.Annotations.CannotApplyEqualityOperatorAttribute">
      <summary>
Indicates that the value of the marked type (or its derivatives) cannot be compared using '==' or '!=' operators and $C$Equals()$END-C$ should be used instead. However, using '==' or '!=' for comparison with $C$null$END-C$ is always permitted.</summary>
    </member>
    <member name="T:Atom.Annotations.BaseTypeRequiredAttribute">
      <summary>
When applied to a target attribute, specifies a requirement for any type marked with the target attribute to implement or inherit specific type or types.</summary>
    </member>
    <member name="M:Atom.Annotations.BaseTypeRequiredAttribute.#ctor(System.Type)">
      <param name="baseType">
</param>
    </member>
    <member name="P:Atom.Annotations.BaseTypeRequiredAttribute.BaseType">
    </member>
    <member name="T:Atom.Annotations.UsedImplicitlyAttribute">
      <summary>
Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library), so this symbol will not be marked as unused (as well as by other usage inspections)</summary>
    </member>
    <member name="M:Atom.Annotations.UsedImplicitlyAttribute.#ctor">
    </member>
    <member name="M:Atom.Annotations.UsedImplicitlyAttribute.#ctor(Atom.Annotations.ImplicitUseKindFlags)">
      <param name="useKindFlags">
</param>
    </member>
    <member name="M:Atom.Annotations.UsedImplicitlyAttribute.#ctor(Atom.Annotations.ImplicitUseTargetFlags)">
      <param name="targetFlags">
</param>
    </member>
    <member name="M:Atom.Annotations.UsedImplicitlyAttribute.#ctor(Atom.Annotations.ImplicitUseKindFlags,Atom.Annotations.ImplicitUseTargetFlags)">
      <param name="useKindFlags">
</param>
      <param name="targetFlags">
</param>
    </member>
    <member name="P:Atom.Annotations.UsedImplicitlyAttribute.UseKindFlags">
    </member>
    <member name="P:Atom.Annotations.UsedImplicitlyAttribute.TargetFlags">
    </member>
    <member name="T:Atom.Annotations.MeansImplicitUseAttribute">
      <summary>
Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes as unused (as well as by other usage inspections)</summary>
    </member>
    <member name="M:Atom.Annotations.MeansImplicitUseAttribute.#ctor">
    </member>
    <member name="M:Atom.Annotations.MeansImplicitUseAttribute.#ctor(Atom.Annotations.ImplicitUseKindFlags)">
      <param name="useKindFlags">
</param>
    </member>
    <member name="M:Atom.Annotations.MeansImplicitUseAttribute.#ctor(Atom.Annotations.ImplicitUseTargetFlags)">
      <param name="targetFlags">
</param>
    </member>
    <member name="M:Atom.Annotations.MeansImplicitUseAttribute.#ctor(Atom.Annotations.ImplicitUseKindFlags,Atom.Annotations.ImplicitUseTargetFlags)">
      <param name="useKindFlags">
</param>
      <param name="targetFlags">
</param>
    </member>
    <member name="P:Atom.Annotations.MeansImplicitUseAttribute.UseKindFlags">
    </member>
    <member name="P:Atom.Annotations.MeansImplicitUseAttribute.TargetFlags">
    </member>
    <member name="T:Atom.Annotations.PublicAPIAttribute">
      <summary>
This attribute is intended to mark publicly available API which should not be removed and so is treated as used</summary>
    </member>
    <member name="M:Atom.Annotations.PublicAPIAttribute.#ctor">
    </member>
    <member name="M:Atom.Annotations.PublicAPIAttribute.#ctor(System.String)">
      <param name="comment">
</param>
    </member>
    <member name="P:Atom.Annotations.PublicAPIAttribute.Comment">
    </member>
    <member name="T:Atom.Annotations.InstantHandleAttribute">
      <summary>
Tells code analysis engine if the parameter is completely handled when the invoked method is on stack. If the parameter is a delegate, indicates that delegate is executed while the method is executed. If the parameter is an enumerable, indicates that it is enumerated while the method is executed</summary>
    </member>
    <member name="T:Atom.Annotations.PureAttribute">
      <summary>
Indicates that a method does not make any observable state changes. The same as $C$System.Diagnostics.Contracts.PureAttribute$END-C$</summary>
    </member>
    <member name="T:Atom.Annotations.PathReferenceAttribute">
      <summary>
Indicates that a parameter is a path to a file or a folder within a web project. Path can be relative or absolute, starting from web root (~)</summary>
    </member>
    <member name="M:Atom.Annotations.PathReferenceAttribute.#ctor">
    </member>
    <member name="M:Atom.Annotations.PathReferenceAttribute.#ctor(System.String)">
      <param name="basePath">
</param>
    </member>
    <member name="P:Atom.Annotations.PathReferenceAttribute.BasePath">
    </member>
    <member name="T:Atom.Annotations.AspMvcAreaMasterLocationFormatAttribute">
    </member>
    <member name="M:Atom.Annotations.AspMvcAreaMasterLocationFormatAttribute.#ctor(System.String)">
      <param name="format">
</param>
    </member>
    <member name="T:Atom.Annotations.AspMvcAreaPartialViewLocationFormatAttribute">
    </member>
    <member name="M:Atom.Annotations.AspMvcAreaPartialViewLocationFormatAttribute.#ctor(System.String)">
      <param name="format">
</param>
    </member>
    <member name="T:Atom.Annotations.AspMvcAreaViewLocationFormatAttribute">
    </member>
    <member name="M:Atom.Annotations.AspMvcAreaViewLocationFormatAttribute.#ctor(System.String)">
      <param name="format">
</param>
    </member>
    <member name="T:Atom.Annotations.AspMvcMasterLocationFormatAttribute">
    </member>
    <member name="M:Atom.Annotations.AspMvcMasterLocationFormatAttribute.#ctor(System.String)">
      <param name="format">
</param>
    </member>
    <member name="T:Atom.Annotations.AspMvcPartialViewLocationFormatAttribute">
    </member>
    <member name="M:Atom.Annotations.AspMvcPartialViewLocationFormatAttribute.#ctor(System.String)">
      <param name="format">
</param>
    </member>
    <member name="T:Atom.Annotations.AspMvcViewLocationFormatAttribute">
    </member>
    <member name="M:Atom.Annotations.AspMvcViewLocationFormatAttribute.#ctor(System.String)">
      <param name="format">
</param>
    </member>
    <member name="T:Atom.Annotations.AspMvcActionAttribute">
      <summary>
ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC action. If applied to a method, the MVC action name is calculated implicitly from the context. Use this attribute for custom wrappers similar to $C$System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)$END-C$</summary>
    </member>
    <member name="M:Atom.Annotations.AspMvcActionAttribute.#ctor">
    </member>
    <member name="M:Atom.Annotations.AspMvcActionAttribute.#ctor(System.String)">
      <param name="anonymousProperty">
</param>
    </member>
    <member name="P:Atom.Annotations.AspMvcActionAttribute.AnonymousProperty">
    </member>
    <member name="T:Atom.Annotations.AspMvcAreaAttribute">
      <summary>
ASP.NET MVC attribute. Indicates that a parameter is an MVC area. Use this attribute for custom wrappers similar to $C$System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)$END-C$</summary>
    </member>
    <member name="M:Atom.Annotations.AspMvcAreaAttribute.#ctor">
    </member>
    <member name="M:Atom.Annotations.AspMvcAreaAttribute.#ctor(System.String)">
      <param name="anonymousProperty">
</param>
    </member>
    <member name="P:Atom.Annotations.AspMvcAreaAttribute.AnonymousProperty">
    </member>
    <member name="T:Atom.Annotations.AspMvcControllerAttribute">
      <summary>
ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC controller. If applied to a method, the MVC controller name is calculated implicitly from the context. Use this attribute for custom wrappers similar to $C$System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)$END-C$</summary>
    </member>
    <member name="M:Atom.Annotations.AspMvcControllerAttribute.#ctor">
    </member>
    <member name="M:Atom.Annotations.AspMvcControllerAttribute.#ctor(System.String)">
      <param name="anonymousProperty">
</param>
    </member>
    <member name="P:Atom.Annotations.AspMvcControllerAttribute.AnonymousProperty">
    </member>
    <member name="T:Atom.Annotations.AspMvcMasterAttribute">
      <summary>
ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute for custom wrappers similar to $C$System.Web.Mvc.Controller.View(String, String)$END-C$</summary>
    </member>
    <member name="T:Atom.Annotations.AspMvcModelTypeAttribute">
      <summary>
ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute for custom wrappers similar to $C$System.Web.Mvc.Controller.View(String, Object)$END-C$</summary>
    </member>
    <member name="T:Atom.Annotations.AspMvcPartialViewAttribute">
      <summary>
ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC partial view. If applied to a method, the MVC partial view name is calculated implicitly from the context. Use this attribute for custom wrappers similar to $C$System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)$END-C$</summary>
    </member>
    <member name="T:Atom.Annotations.AspMvcSupressViewErrorAttribute">
      <summary>
ASP.NET MVC attribute. Allows disabling all inspections for MVC views within a class or a method.</summary>
    </member>
    <member name="T:Atom.Annotations.AspMvcDisplayTemplateAttribute">
      <summary>
ASP.NET MVC attribute. Indicates that a parameter is an MVC display template. Use this attribute for custom wrappers similar to $C$System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)$END-C$</summary>
    </member>
    <member name="T:Atom.Annotations.AspMvcEditorTemplateAttribute">
      <summary>
ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template. Use this attribute for custom wrappers similar to $C$System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)$END-C$</summary>
    </member>
    <member name="T:Atom.Annotations.AspMvcTemplateAttribute">
      <summary>
ASP.NET MVC attribute. Indicates that a parameter is an MVC template. Use this attribute for custom wrappers similar to $C$System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)$END-C$</summary>
    </member>
    <member name="T:Atom.Annotations.AspMvcViewAttribute">
      <summary>
ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC view. If applied to a method, the MVC view name is calculated implicitly from the context. Use this attribute for custom wrappers similar to $C$System.Web.Mvc.Controller.View(Object)$END-C$</summary>
    </member>
    <member name="T:Atom.Annotations.AspMvcActionSelectorAttribute">
      <summary>
ASP.NET MVC attribute. When applied to a parameter of an attribute, indicates that this parameter is an MVC action name</summary>
    </member>
    <member name="T:Atom.Annotations.HtmlElementAttributesAttribute">
    </member>
    <member name="M:Atom.Annotations.HtmlElementAttributesAttribute.#ctor">
    </member>
    <member name="M:Atom.Annotations.HtmlElementAttributesAttribute.#ctor(System.String)">
      <param name="name">
</param>
    </member>
    <member name="P:Atom.Annotations.HtmlElementAttributesAttribute.Name">
    </member>
    <member name="T:Atom.Annotations.HtmlAttributeValueAttribute">
    </member>
    <member name="M:Atom.Annotations.HtmlAttributeValueAttribute.#ctor(System.String)">
      <param name="name">
</param>
    </member>
    <member name="P:Atom.Annotations.HtmlAttributeValueAttribute.Name">
    </member>
    <member name="T:Atom.Annotations.RazorSectionAttribute">
      <summary>
Razor attribute. Indicates that a parameter or a method is a Razor section. Use this attribute for custom wrappers similar to $C$System.Web.WebPages.WebPageBase.RenderSection(String)$END-C$</summary>
    </member>
    <member name="T:Atom.Utilities">
      <summary>
Miscellaneous helper-methods.</summary>
    </member>
    <member name="M:Atom.Utilities.CollectCode">
      <summary>
Returns the concatenated code of all "atom"-files delivered by "CollectFiles".</summary>
      <returns>
The concatenated code.</returns>
    </member>
    <member name="M:Atom.Utilities.CollectFiles(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
Collect filenames with given extensions in certain standard directories.</summary>
      <returns>
The filenames found.</returns>
      <param name="extensions">
Allowed extensions.</param>
    </member>
    <member name="M:Atom.Utilities.ReadFile(System.String)">
      <summary>
Reads an entire text-file and returns contents as a string.</summary>
      <returns>
The content of the file.</returns>
      <param name="filePath">
Path of the file to be read.</param>
    </member>
    <member name="M:Atom.Utilities.ReplaceInFiles(System.String,System.String)">
      <summary>
The replace in files.</summary>
      <param name="original">
The original.</param>
      <param name="replacement">
The replacement.</param>
    </member>
    <member name="M:Atom.Utilities.WriteFile(System.String,System.String)">
      <summary>
Writes text to file</summary>
      <param name="filePath">
The file-path.</param>
      <param name="txt">
The text to be written.</param>
    </member>
  </members>
</doc>
