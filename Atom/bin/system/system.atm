((v) let (v) load size listify (n) let ((n) load counter 1 - item (v) load counter 1 - item 1 listify (let) 0 item) (v) load size loop (unlocalize) 0 item (v) load size 3 * 1 + listify)(deftransform) let
(deftransform evaluate unlocalize)(def 'assign n items on tos to n variables') let

((name) let ((name) head show ':' showline '        ' show (name) head '-help' glue load showline '        ' show (name) load load showall '' showline) () (name) load load '(' = if) (help) let

' (1 listify load showline) (help) let '

((names) load split drop drop (names) load size (a) let ((b) let (((b) load show ': ' show (b) head showline)()(b) head '' # if)()(b) head '(' # if)(a) load loop)(documentation) let

(((lparen showall rparen) (blank show blank) iflist) map) (showall) let