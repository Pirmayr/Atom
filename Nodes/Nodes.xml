<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>Nodes</name>
  </assembly>
  <members>
    <member name="N:Nodes">
    </member>
    <member name="P:Nodes.INode.List">
      <summary>
Gets or sets the list, that is associated with the node.</summary>
    </member>
    <member name="P:Nodes.INode.SafeList">
      <summary>
Gets either the list, that is associated with the node,   or, if no list is associated with the node,   the node itself wrapped in a list.</summary>
    </member>
    <member name="P:Nodes.INode.Value">
      <summary>
Gets the value of the node.</summary>
    </member>
    <member name="M:Nodes.INode.Added(System.Collections.Generic.IEnumerable{Nodes.INode})">
      <summary>
Returns the list associated with this node joined with the given list.</summary>
      <returns>
Joined list.</returns>
      <param name="list">
List to be added.</param>
    </member>
    <member name="M:Nodes.INode.GetHead">
      <summary>
The head of the list, that is associated with the node,   or the node itself if there is no list associated with   the node.</summary>
      <returns>
The <see cref="INode" />.</returns>
    </member>
    <member name="M:Nodes.INode.GetValueInt">
      <summary>
Gets the value of the head of the list associated with the node, if any.</summary>
      <returns>
The <see cref="int" />.</returns>
    </member>
    <member name="P:Nodes.INodeList.Count">
      <summary>
Gets the count.</summary>
    </member>
    <member name="P:Nodes.INodeList.Item(System.Int32)">
      <summary>
Indexer for this list.</summary>
      <value>
The <see cref="INode" />.</value>
      <param name="key">
The key.</param>
    </member>
    <member name="M:Nodes.INodeList.AddElement(Nodes.INode)">
      <summary>
Adds an element to the list.</summary>
      <param name="node">
Element to be added.</param>
    </member>
    <member name="M:Nodes.INodeList.Clear">
      <summary>
The clear.</summary>
    </member>
    <member name="M:Nodes.INodeList.Clone">
      <summary>
Returns a shallow clone of this list.</summary>
      <returns>
The cloned list.</returns>
    </member>
    <member name="M:Nodes.INodeList.Joined(System.Collections.Generic.IEnumerable{Nodes.INode})">
      <summary>
Add given list to this list and returns the joined result.</summary>
      <returns>
Joined list.</returns>
      <param name="list">
List to be added to this list.</param>
    </member>
    <member name="M:Nodes.INodeList.ListAt(System.String)">
      <summary>
Searches for the element identified by the specified name.</summary>
      <remarks>
The element is searched downwards from the top of stack.</remarks>
      <returns>
List ("null" if no list could be found).</returns>
      <param name="name">
The name of the element.</param>
    </member>
    <member name="M:Nodes.INodeList.NodeAt(System.String)">
      <summary>
Returns the list-node with the specified name.</summary>
      <returns>
The list-node.</returns>
      <param name="name">
The name of the list-node.</param>
    </member>
    <member name="M:Nodes.INodeList.Pop(System.Int32,System.Boolean)">
      <summary>
Removes multiple items from the top of stack and returns them as a list.</summary>
      <returns>
Items list.</returns>
      <param name="count">
The number of items.</param>
      <param name="reverse">
If "true" the list will be reversed, otherwise the order remains unchanged.</param>
    </member>
    <member name="M:Nodes.INodeList.Pop">
      <summary>
Removes the element on the top of stack.</summary>
      <returns>
The element on the top of stack.</returns>
    </member>
    <member name="M:Nodes.INodeList.Push(Nodes.INode)">
      <summary>
Places specified element onto the top of stack.</summary>
      <param name="node">
The node to be pushed.</param>
    </member>
    <member name="M:Nodes.INodeList.PushInt(System.Int32)">
      <summary>
Places specified integer-value onto the top of stack.</summary>
      <param name="value">
The integer-value to be pushed.</param>
    </member>
    <member name="M:Nodes.INodeList.PushName(Nodes.INodeList)">
      <summary>
Pushes value as a named value onto this stack. Both, name and value, are contained in the stack-fragment specified.</summary>
      <remarks>
- This function essentially implements the "let"-command of "atom". - The TOS of the stack-fragment contains the name as a list element, whereas TOS - 1 is the value.</remarks>
      <param name="topOfStack">
Stack-fragment with Name and value.</param>
    </member>
    <member name="M:Nodes.INodeList.RemoveRange(System.Int32,System.Int32)">
      <summary>
The remove range.</summary>
      <param name="start">
The start.</param>
      <param name="count">
The count.</param>
    </member>
    <member name="T:Nodes.NodesHelpers">
      <summary>
Description of MyClass.</summary>
    </member>
    <member name="M:Nodes.NodesHelpers.NewNode(System.String)">
      <summary>
Initializes a new node.</summary>
      <returns>
The <see cref="INode" />.</returns>
      <param name="value">
The value of the node.</param>
    </member>
    <member name="M:Nodes.NodesHelpers.NewNode(System.Collections.Generic.IEnumerable{Nodes.INode})">
      <summary>
Initializes a new instance of the $LS$$SL$$LE$Node$EL$ class.</summary>
      <returns>
The <see cref="INode" />.</returns>
      <param name="list">
The list, that is associated with the node.</param>
    </member>
    <member name="M:Nodes.NodesHelpers.NewNode(System.String,System.Collections.Generic.IEnumerable{Nodes.INode})">
      <summary>
Initializes a new instance of the $LS$$SL$$LE$Node$EL$ class.</summary>
      <returns>
The <see cref="INode" />.</returns>
      <param name="value">
The value of the node.</param>
      <param name="list">
The list, that is associated with the node.</param>
    </member>
    <member name="M:Nodes.NodesHelpers.NewNodeList">
      <summary>
Initializes a new instance of the $LS$$SL$$LE$NodeList$EL$ class.</summary>
      <returns>
The <see cref="INodeList" />.</returns>
    </member>
    <member name="M:Nodes.NodesHelpers.NewNodeList(Nodes.INode)">
      <summary>
Initializes a new instance of the $LS$$SL$$LE$NodeList$EL$ class.</summary>
      <returns>
The <see cref="INodeList" />.</returns>
      <param name="node">
First node to initialize the list with.</param>
    </member>
  </members>
</doc>
